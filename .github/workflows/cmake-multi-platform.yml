name: Build Pico W Project

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-pico:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set build output directory
      - name: Set build output directory
        id: build-dir
        run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc g++ git build-essential

      # 4. Prepare Pico SDK folder
      - name: Prepare Pico SDK folder
        run: mkdir -p ble/external

      # 5. Clone Pico SDK
      - name: Clone Pico SDK
        run: git clone -b master https://github.com/raspberrypi/pico-sdk.git ble/external/pico-sdk

      # 6. Verify Pico SDK
      - name: List Pico SDK
        run: ls -R ble/external/pico-sdk | head -20

      # 7. Create build directory
      - name: Create build folder
        run: mkdir -p ${{ steps.build-dir.outputs.build-output-dir }}

      # 8. Configure CMake
      - name: Configure CMake
        run: cmake -B ${{ steps.build-dir.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=g++ \
              -DCMAKE_C_COMPILER=gcc \
              -DCMAKE_BUILD_TYPE=Release \
              -S ${{ github.workspace }}/ble

      # 9. Build project
      - name: Build project
        run: cmake --build ${{ steps.build-dir.outputs.build-output-dir }} -- -j$(nproc)

      # 10. List build outputs
      - name: List build outputs
        run: ls -R ${{ steps.build-dir.outputs.build-output-dir }} | head -20

      # 11. (Optional) Generate UF2 file if using pico-sdk functions
      - name: Generate UF2
        run: cmake --build ${{ steps.build-dir.outputs.build-output-dir }} --target elf2uf2
