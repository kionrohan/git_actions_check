# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms
 
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
 
jobs:
  build:
    runs-on: ${{ matrix.os }}
 
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
 
      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
 
    steps:
    # Checkout code first
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Install ARM GCC toolchain for Pico development
    - name: Install ARM GCC toolchain (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib

    # Setup Pico SDK properly
    - name: Setup Pico SDK
      run: |
        # Create external directory
        mkdir -p ble/external
        
        # Clone a specific stable version of the Pico SDK
        git clone --branch 1.5.1 --depth 1 https://github.com/raspberrypi/pico-sdk.git ble/external/pico-sdk
        
        # Initialize submodules
        cd ble/external/pico-sdk
        git submodule update --init --recursive --depth 1
        
        # List contents to verify
        echo "Pico SDK contents:"
        ls -la
        
        # Check if pico_sdk_import.cmake exists
        if [ -f "pico_sdk_import.cmake" ]; then
          echo "✓ pico_sdk_import.cmake found"
        else
          echo "✗ pico_sdk_import.cmake not found, creating it..."
          # Create the import file based on the standard template
          cat > pico_sdk_import.cmake << 'EOF'
        # This is a copy of <PICO_SDK_PATH>/pico_sdk_import.cmake

        # This can be dropped into an external project to help locate this SDK
        # It should be include()ed prior to project()

        if (DEFINED ENV{PICO_SDK_PATH} AND (NOT PICO_SDK_PATH))
            set(PICO_SDK_PATH $ENV{PICO_SDK_PATH})
            message("Using PICO_SDK_PATH from environment ('${PICO_SDK_PATH}')")
        endif ()

        if (DEFINED ENV{PICO_SDK_FETCH_FROM_GIT} AND (NOT PICO_SDK_FETCH_FROM_GIT))
            set(PICO_SDK_FETCH_FROM_GIT $ENV{PICO_SDK_FETCH_FROM_GIT})
            message("Using PICO_SDK_FETCH_FROM_GIT from environment ('${PICO_SDK_FETCH_FROM_GIT}')")
        endif ()

        if (DEFINED ENV{PICO_SDK_FETCH_FROM_GIT_PATH} AND (NOT PICO_SDK_FETCH_FROM_GIT_PATH))
            set(PICO_SDK_FETCH_FROM_GIT_PATH $ENV{PICO_SDK_FETCH_FROM_GIT_PATH})
            message("Using PICO_SDK_FETCH_FROM_GIT_PATH from environment ('${PICO_SDK_FETCH_FROM_GIT_PATH}')")
        endif ()

        set(PICO_SDK_PATH "${CMAKE_CURRENT_LIST_DIR}")
        if (NOT EXISTS ${PICO_SDK_PATH})
            message(FATAL_ERROR "Directory '${PICO_SDK_PATH}' not found")
        endif ()

        set(PICO_SDK_INIT_CMAKE_FILE ${PICO_SDK_PATH}/pico_sdk_init.cmake)
        if (NOT EXISTS ${PICO_SDK_INIT_CMAKE_FILE})
            message(FATAL_ERROR "Directory '${PICO_SDK_PATH}' does not appear to contain the Raspberry Pi Pico SDK")
        endif ()

        set(PICO_SDK_PATH ${PICO_SDK_PATH} CACHE PATH "Path to the Raspberry Pi Pico SDK" FORCE)

        include(${PICO_SDK_INIT_CMAKE_FILE})
        EOF
          echo "✓ Created pico_sdk_import.cmake"
        fi

    # Verify setup
    - name: Verify Pico SDK Setup
      run: |
        echo "Checking required files:"
        ls -la ble/external/pico-sdk/pico_sdk_import.cmake
        ls -la ble/external/pico-sdk/pico_sdk_init.cmake
        echo "Pico SDK setup complete!"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}/ble
 
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
 
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
