name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # STEP 1: Install ARM GCC Toolchain (MISSING in your current workflow)
    - name: Install ARM GCC toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '12.3.Rel1'

    # STEP 2: Clone Pico SDK with proper submodule initialization
    - name: Setup Pico SDK
      shell: bash
      run: |
        mkdir -p ble/external
        git clone --branch 1.5.1 https://github.com/raspberrypi/pico-sdk.git ble/external/pico-sdk
        cd ble/external/pico-sdk
        git submodule update --init --recursive
        
        # Create pico_sdk_import.cmake if it doesn't exist
        if [ ! -f "pico_sdk_import.cmake" ]; then
          echo "Creating missing pico_sdk_import.cmake..."
          cat > pico_sdk_import.cmake << 'EOF'
        # This is a copy of <PICO_SDK_PATH>/pico_sdk_import.cmake

        # This can be dropped into an external project to help locate this SDK
        # It should be include()ed prior to project()

        if (DEFINED ENV{PICO_SDK_PATH} AND (NOT PICO_SDK_PATH))
            set(PICO_SDK_PATH $ENV{PICO_SDK_PATH})
            message("Using PICO_SDK_PATH from environment ('${PICO_SDK_PATH}')")
        endif ()

        if (DEFINED ENV{PICO_SDK_FETCH_FROM_GIT} AND (NOT PICO_SDK_FETCH_FROM_GIT))
            set(PICO_SDK_FETCH_FROM_GIT $ENV{PICO_SDK_FETCH_FROM_GIT})
            message("Using PICO_SDK_FETCH_FROM_GIT from environment ('${PICO_SDK_FETCH_FROM_GIT}')")
        endif ()

        if (DEFINED ENV{PICO_SDK_FETCH_FROM_GIT_PATH} AND (NOT PICO_SDK_FETCH_FROM_GIT_PATH))
            set(PICO_SDK_FETCH_FROM_GIT_PATH $ENV{PICO_SDK_FETCH_FROM_GIT_PATH})
            message("Using PICO_SDK_FETCH_FROM_GIT_PATH from environment ('${PICO_SDK_FETCH_FROM_GIT_PATH}')")
        endif ()

        set(PICO_SDK_PATH "${CMAKE_CURRENT_LIST_DIR}")
        if (NOT EXISTS ${PICO_SDK_PATH})
            message(FATAL_ERROR "Directory '${PICO_SDK_PATH}' not found")
        endif ()

        set(PICO_SDK_INIT_CMAKE_FILE ${PICO_SDK_PATH}/pico_sdk_init.cmake)
        if (NOT EXISTS ${PICO_SDK_INIT_CMAKE_FILE})
            message(FATAL_ERROR "Directory '${PICO_SDK_PATH}' does not appear to contain the Raspberry Pi Pico SDK")
        endif ()

        set(PICO_SDK_PATH ${PICO_SDK_PATH} CACHE PATH "Path to the Raspberry Pi Pico SDK" FORCE)

        include(${PICO_SDK_INIT_CMAKE_FILE})
        EOF
        fi

    # STEP 3: Verify setup is complete
    - name: Verify toolchain and SDK
      shell: bash
      run: |
        echo "✓ ARM GCC version:"
        arm-none-eabi-gcc --version
        echo "✓ Checking required SDK files:"
        ls -la ble/external/pico-sdk/pico_sdk_import.cmake
        ls -la ble/external/pico-sdk/pico_sdk_init.cmake
        echo "✓ All required files found!"

    # Step to clean the build directory 
    - name: Clean build directory
      run: rm -rf ${{ steps.strings.outputs.build-output-dir }}


    # STEP 4: Configure CMake 
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}/ble

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --verbose

    - name: List build folder contents
      run: ls -l ${{ steps.strings.outputs.build-output-dir }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ${{ steps.strings.outputs.build-output-dir }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
