name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # STEP 1: Install ARM GCC Toolchain
    - name: Install ARM GCC toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '12.3.Rel1'

    # STEP 2: Clone Pico SDK with proper submodule initialization
    - name: Setup Pico SDK
      shell: bash
      run: |
        mkdir -p ble/external
        git clone --branch 1.5.1 https://github.com/raspberrypi/pico-sdk.git ble/external/pico-sdk
        cd ble/external/pico-sdk
        git submodule update --init --recursive

    # STEP 3: Verify ARM GCC is available
    - name: Verify toolchain
      shell: bash
      run: |
        arm-none-eabi-gcc --version
        ls -la ble/external/pico-sdk/pico_sdk_import.cmake

    # STEP 4: Configure CMake 
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}/ble

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
